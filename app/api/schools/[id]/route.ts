import { NextRequest, NextResponse } from 'next/server';
import { schoolsData } from '@/lib/schools-data';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    console.log('üè´ Recherche √©cole avec ID:', id);
    
    // Chercher l'√©cole dans les donn√©es int√©gr√©es
    const school = schoolsData.find((ecole) => ecole.id === id);
    
    if (!school) {
      console.log('‚ùå √âcole non trouv√©e avec ID:', id);
      return NextResponse.json({ error: '√âcole non trouv√©e' }, { status: 404 });
    }
    
    console.log('‚úÖ √âcole trouv√©e:', school.nom);
    return NextResponse.json(school);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'√©cole:', error);
    return NextResponse.json({ 
      error: 'Erreur lors de la r√©cup√©ration de l\'√©cole',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 });
  }
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log('‚ö†Ô∏è Tentative de modification d\'√©cole - fonctionnalit√© d√©sactiv√©e (donn√©es int√©gr√©es)');
  
  return NextResponse.json({ 
    error: 'La modification d\'√©coles est d√©sactiv√©e car les donn√©es sont int√©gr√©es au code',
    message: 'Contactez un d√©veloppeur pour modifier une √©cole'
  }, { status: 501 });
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log('‚ö†Ô∏è Tentative de suppression d\'√©cole - fonctionnalit√© d√©sactiv√©e (donn√©es int√©gr√©es)');
  
  return NextResponse.json({ 
    error: 'La suppression d\'√©coles est d√©sactiv√©e car les donn√©es sont int√©gr√©es au code',
    message: 'Contactez un d√©veloppeur pour supprimer une √©cole'
  }, { status: 501 });
}
