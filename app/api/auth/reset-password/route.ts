import { NextResponse } from 'next/server';
import bcrypt from 'bcrypt';
import connectDB from '@/lib/mongodb';
import User from '@/models/user.model';

// GET - V√©rifier la validit√© du token de r√©initialisation
export async function GET(request: Request) {
  try {
    console.log('üîÑ Verify reset token API called');
    
    const url = new URL(request.url);
    const token = url.searchParams.get('token');

    if (!token) {
      return NextResponse.json(
        { error: 'Token de r√©initialisation manquant' },
        { status: 400 }
      );
    }

    console.log('üîç V√©rification du token:', token.substring(0, 10) + '...');

    // Connexion √† la base de donn√©es
    await connectDB();
    console.log('üì¶ Connexion √† la base de donn√©es √©tablie');

    // Rechercher l'utilisateur avec ce token non expir√©
    const user = await User.findOne({
      passwordResetToken: token,
      passwordResetExpires: { $gt: new Date() }
    });

    if (!user) {
      console.log('‚ùå Token invalide ou expir√©');
      return NextResponse.json(
        { error: 'Token de r√©initialisation invalide ou expir√©' },
        { status: 400 }
      );
    }

    console.log('‚úÖ Token valide pour l\'utilisateur:', user.username);

    return NextResponse.json({
      valid: true,
      message: 'Token valide',
      email: user.email
    });

  } catch (error) {
    console.error('‚ùå Erreur dans verify reset token API:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la v√©rification du token' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    console.log('üîÑ Reset password API called');
    
    const body = await request.json();
    const { token, password } = body;

    if (!token || !password) {
      return NextResponse.json(
        { error: 'Token et mot de passe requis' },
        { status: 400 }
      );
    }

    if (password.length < 6) {
      return NextResponse.json(
        { error: 'Le mot de passe doit contenir au moins 6 caract√®res' },
        { status: 400 }
      );
    }

    console.log('üîç Recherche utilisateur avec token:', token.substring(0, 10) + '...');

    // Connexion √† la base de donn√©es
    await connectDB();
    console.log('üì¶ Connexion √† la base de donn√©es √©tablie');

    // Rechercher l'utilisateur avec ce token non expir√©
    const user = await User.findOne({
      passwordResetToken: token,
      passwordResetExpires: { $gt: new Date() }
    });

    if (!user) {
      console.log('‚ùå Token invalide ou expir√©');
      return NextResponse.json(
        { error: 'Token de r√©initialisation invalide ou expir√©' },
        { status: 400 }
      );
    }

    console.log('üë§ Utilisateur trouv√©:', user.username);

    // Hasher le nouveau mot de passe
    console.log('üîê Hashage du nouveau mot de passe...');
    const passwordHash = await bcrypt.hash(password, 10);

    // Mettre √† jour le mot de passe et supprimer les tokens de r√©initialisation
    await User.findByIdAndUpdate(user._id, {
      passwordHash: passwordHash,
      passwordResetToken: null,
      passwordResetExpires: null
    });

    console.log('‚úÖ Mot de passe r√©initialis√© avec succ√®s');

    return NextResponse.json({
      success: true,
      message: 'Mot de passe r√©initialis√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur dans reset-password API:', error);
    return NextResponse.json(
      { error: 'Erreur lors de la r√©initialisation du mot de passe' },
      { status: 500 }
    );
  }
}
